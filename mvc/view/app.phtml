<?php
$datas = $this->data;
?>

<div class="flex h-screen bg-gray-900 text-white">
    <aside class="w-72 bg-gray-800 p-5 flex flex-col justify-between">
        <div>
            <h2 class="text-2xl font-bold text-pink-500 mb-6">PHP Mailer Chat</h2>

            <p class="text-sm mb-6">
                Hello, <span class="text-pink-400 font-semibold"><?= htmlspecialchars($datas["username"]) ?></span> 👋
            </p>

            <h3 class="text-sm font-semibold uppercase text-pink-400 mb-3">Other Users</h3>
            <ul class="space-y-2 overflow-y-auto max-h-[calc(100vh-230px)] pr-2 custom-scrollbar" id="user-list">
                <?php foreach ($datas["users"] as $user): ?>
                    <li class="flex items-center justify-between px-3 py-2 rounded-md cursor-pointer hover:bg-gray-700 transition-colors user-item"
                        data-userid="<?= $user['id'] ?>">
                        <span class="text-gray-300">
                            <?= htmlspecialchars($user['display_name'] ?? $user['username']) ?>
                        </span>
                        <span class="inline-block w-2.5 h-2.5 rounded-full bg-green-400"></span>
                    </li>
                <?php endforeach; ?>
            </ul>
        </div>

        <a href="/auth/logout" class="text-sm text-pink-500 hover:underline">Logout</a>
    </aside>

    <main class="flex flex-col flex-1">
        <header class="px-6 py-4 border-b border-gray-700 bg-gray-800 flex items-center justify-between">
            <h1 class="text-xl font-semibold text-pink-400 flex items-center gap-2">
                Chat Room
                <span id="active-user-bubble" class="px-2 py-1 text-xs rounded-full bg-pink-600 text-white hidden">
                    <!-- Filled dynamically -->
                </span>
            </h1>
        </header>

        <section id="chat-messages" class="flex-1 overflow-y-auto p-6 space-y-4 bg-gray-900 custom-scrollbar">
        </section>

        <footer class="px-6 py-4 border-t border-gray-700 bg-gray-800">
            <form id="message-form" class="flex gap-3">
                <input
                        type="text"
                        name="message"
                        placeholder="Type your message..."
                        class="flex-1 px-4 py-2 rounded-md bg-gray-700 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-pink-500"
                        autocomplete="off"
                        required
                />
                <button
                        type="submit"
                        class="px-5 py-2 rounded-md bg-pink-500 text-white font-semibold hover:bg-pink-600 transition-colors duration-200"
                >
                    Send
                </button>
            </form>
        </footer>
    </main>
</div>

<style>
    .custom-scrollbar::-webkit-scrollbar {
        width: 6px;
    }

    .custom-scrollbar::-webkit-scrollbar-thumb {
        background-color: #f472b6;
        border-radius: 3px;
    }

    .custom-scrollbar::-webkit-scrollbar-track {
        background-color: transparent;
    }

    .user-item.selected {
        background-color: #ec4899;
        color: white;
    }

    .user-item.selected span:first-child {
        font-weight: bold;
    }
</style>

<script>
    const userItems = document.querySelectorAll('.user-item');
    const activeUserBubble = document.getElementById('active-user-bubble');

    userItems.forEach(item => {
        item.addEventListener('click', () => {
            userItems.forEach(i => i.classList.remove('selected'));
            item.classList.add('selected');

            const username = item.querySelector('span:first-child').textContent;
            activeUserBubble.textContent = username;
            activeUserBubble.classList.remove('hidden');
        });
    });
</script>


<script>
    // ✅ Globale Methoden
    function showToast(message, type = 'info') {
        const toast = document.createElement('div');

        const colors = {
            success: 'bg-green-500 border-green-300',
            error: 'bg-red-500 border-red-300',
            info: 'bg-pink-600 border-pink-400',
            warning: 'bg-yellow-400 text-black border-yellow-300'
        };

        const base = `
            fixed bottom-8 left-1/2 transform -translate-x-1/2
            max-w-xs w-auto px-4 py-2 rounded-lg
            border shadow-lg text-white text-sm font-medium
            z-50 transition-opacity duration-300
        `;

        toast.className = `${base} ${colors[type] || colors.info}`;
        toast.textContent = message;

        toast.style.backdropFilter = 'blur(6px)';
        toast.style.opacity = '1';

        document.body.appendChild(toast);

        setTimeout(() => {
            toast.style.opacity = '0';
            setTimeout(() => toast.remove(), 300);
        }, 3000);
    }

    function confirmDeleteMessage(messageId, buttonElement) {
        if (buttonElement?.disabled) return;
        if (!confirm('Willst du diese Nachricht wirklich löschen?')) return;

        buttonElement.disabled = true;
        buttonElement.textContent = '...';

        deleteMessage(messageId, buttonElement);
    }

    function deleteMessage(messageId, buttonElement = null) {
        fetch('/message/delete', {
            method: 'POST',
            headers: {'Content-Type': 'application/x-www-form-urlencoded'},
            body: `message_id=${encodeURIComponent(messageId)}`
        })
            .then(async res => {
                const data = await res.json();

                if (!res.ok || !data.success) {
                    const error = data?.error || 'Löschen fehlgeschlagen';
                    showToast(error, 'error');
                    if (buttonElement) {
                        buttonElement.disabled = false;
                        buttonElement.textContent = '🗑️';
                    }
                    return;
                }

                const messageElement = document.querySelector(`[data-id="${messageId}"]`);
                if (messageElement?.parentElement) {
                    messageElement.parentElement.remove();
                }

                showToast('Nachricht gelöscht', 'success');
            })
            .catch(err => {
                console.error(err);
                showToast('Fehler beim Löschen der Nachricht', 'error');
                if (buttonElement) {
                    buttonElement.disabled = false;
                    buttonElement.textContent = '🗑️';
                }
            });
    }


    document.addEventListener('DOMContentLoaded', () => {
        const messageForm = document.getElementById('message-form');
        const messageInput = messageForm.querySelector('input[name="message"]');
        const chatBox = document.getElementById('chat-messages');
        const myUserId = <?= json_encode((string)$_SESSION['user_id']) ?>;

        let receiverId = null;
        let lastFetchedMessagesJSON = null;
        let pendingMessages = [];

        document.querySelectorAll('ul li').forEach(li => {
            li.addEventListener('click', () => {
                receiverId = li.dataset.userid;
                lastFetchedMessagesJSON = null;
                chatBox.innerHTML = '';
                pendingMessages = [];
                fetchMessages(true);
            });
        });

        messageForm.addEventListener('submit', (e) => {
            e.preventDefault();
            const text = messageInput.value.trim();
            if (!text || !receiverId) return;

            const tempId = 'tmp-' + Date.now();
            pendingMessages.push({id: tempId, sender_id: myUserId, message: text, pending: true});
            renderMessages(true);
            messageInput.value = '';

            fetch('/message/send', {
                method: 'POST',
                headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                body: `receiver_id=${encodeURIComponent(receiverId)}&message=${encodeURIComponent(text)}`
            })
                .then(async res => {
                    const data = await res.json();

                    if (res.status === 429 || !res.ok || !data) {
                        const error = data?.error || 'Fehler beim Senden';
                        showToast(error, 'error');
                        return;
                    }

                    pendingMessages = pendingMessages.filter(p => p.message !== text);
                    fetchMessages(false);
                })
                .catch(err => {
                    console.error(err);
                    showToast('Verbindungsfehler 😬', 'error');
                });
        });

        function fetchMessages(forceScroll = false) {
            if (!receiverId) return;

            fetch(`/message/fetch?with=${receiverId}`)
                .then(res => res.json())
                .then(data => {
                    const jsonNow = JSON.stringify(data);
                    const changed = jsonNow !== lastFetchedMessagesJSON;

                    if (!changed && pendingMessages.length === 0) return;

                    // Pending auflösen falls Server-Message vorhanden
                    data.forEach(serverMsg => {
                        pendingMessages = pendingMessages.filter(pending => {
                            return pending.sender_id !== myUserId || pending.message.trim() !== serverMsg.message.trim();
                        });
                    });

                    lastFetchedMessagesJSON = jsonNow;
                    renderMessages(forceScroll, data);
                });
        }

        function renderMessages(forceScroll, serverMessages = []) {
            const isAtBottom = chatBox.scrollTop + chatBox.clientHeight >= chatBox.scrollHeight - 50;
            chatBox.innerHTML = '';

            [...serverMessages, ...pendingMessages].forEach(msg => {
                const isMe = String(msg.sender_id) === myUserId;
                const bubble = document.createElement('div');
                bubble.className = `flex ${isMe ? 'justify-end' : 'justify-start'}`;

                const msgIdStr = msg.id ? String(msg.id) : '';
                const messageIdAttr = msgIdStr && !msg.pending ? `data-id="${msgIdStr}"` : '';
                const timestamp = msg.sent_at
                    ? new Date(msg.sent_at).toLocaleTimeString()
                    : new Date().toLocaleTimeString();

                let statusIcon = '';
                if (isMe) {
                    statusIcon = msg.pending
                        ? `<span class="ml-2 text-white/50 text-xs">⏳</span>`
                        : msg.read_at
                            ? `<span class="ml-2 text-green-400 text-xs">✅</span>`
                            : `<span class="ml-2 text-white/50 text-xs">✔️</span>`;
                }

                bubble.innerHTML = `
                    <div class="relative group max-w-md px-4 py-2 rounded-2xl ${
                    isMe ? 'bg-pink-500 text-white rounded-br-none' : 'bg-gray-700 text-white rounded-bl-none'
                } shadow" ${messageIdAttr}>
                        <p class="text-sm break-words">${msg.message}</p>
                        <div class="flex justify-end text-[10px] mt-1 text-white/50">
                            ${timestamp}
                            ${statusIcon}
                        </div>
                        ${isMe && !msg.pending ? `
                            <button
                                class="delete-btn absolute top-1 right-1 text-white/60 hover:text-white text-xs hidden group-hover:inline"
                                title="Nachricht löschen"
                            >
                                🗑️
                            </button>
                        ` : ''}
                    </div>
                `;

                chatBox.appendChild(bubble);
            });

            chatBox.querySelectorAll('.delete-btn').forEach(btn => {
                const parent = btn.closest('[data-id]');
                const messageId = parent?.dataset?.id;
                if (messageId) {
                    btn.onclick = () => confirmDeleteMessage(messageId, btn);
                }
            });

            if (forceScroll || isAtBottom) {
                chatBox.scrollTop = chatBox.scrollHeight;
            }
        }

        setInterval(() => {
            if (receiverId) fetchMessages(false);
        }, 750);
    });
</script>
